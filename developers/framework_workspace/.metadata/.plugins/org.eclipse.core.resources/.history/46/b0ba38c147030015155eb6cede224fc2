<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
	http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.1.xsd">

	<!-- 
		AOP 설정 - aop 스키마(Namespace) 추가 
		aop 설정의 root 태그 - aop:config
		aop:aspect 
			- Aspect들(advice+pointcut)을 설정하기 위한 태그
			- config 태그의 하위태그이고 여러개 올 수 있다.
				-> 공통로직을 가진 bean당 하나씩 만든다.
			속성 : ref - 공통로직 처리 bean을 지정
	-->
	<aop:config>
	    <aop:aspect ref="logger">
	        <!-- pointcut : 공통사항을 적용할 핵심로직(메소드)을 지정 -->
	        <aop:pointcut expression="execution(public * spring.aop..*Service.*Before*())" id="before-pc"/>
	        <aop:before method="beforeLogger" pointcut-ref="before-pc"/>
	        <aop:after-returning 
	            method="afterReturn" 
	            pointcut="execution(public * spring.aop..*Service.*Return(..))" 
	            returning="returnValue"/>
	        <aop:after-throwing 
	            method="afterThrow" 
	            pointcut="execution(public * spring.aop..*Service.*Throw(..))" 
	            throwing="ex"/>
	    </aop:aspect>
	</aop:config>
	
	<!-- 핵심 비지니스 로직을 가진 bean : Target -->
	<bean name="businessService" class="spring.aop.core.BusinessServiceImpl"/>
	
	<!-- 공통 로직 처리 bean 설정 -->
	<bean name="logger" class="spring.aop.common.LoggerAspect"/>
</beans>
