package spring.aop.common;

import org.apache.log4j.Logger;
import org.aspectj.lang.ProceedingJoinPoint;

// 공통로직을 처리할 메소드들을 구현할 클래스
public class LoggerAspect {

	private static Logger logger = Logger.getLogger(LoggerAspect.class);
	
	// 핵심로직이 처리되기 전에 먼저 실행될 공통 로직
	public void beforeLogger() {
		logger.info("LoggerAspect.beforeLogger() 실행");
	}
	
	// 핵심로직(메소드) 처리후 실행 공통메소드
	// 정상 처리후 - 핵심메소드가 return 한 경우
	public void afterReturn(Object returnValue) {
		logger.info("LoggerAspect.afterReturn()실행. 리턴값 : " + returnValue);
	}
	
	// 핵심로직에서 오류발생한 후 호출
	public void afterThrow(Throwable ex) {
		logger.error("LoggerAspect.afterThrow()실행", ex);
	}
	
	// around처리 공통메소드 - 핵심로직이 실행된 시간을 로그로 기록
	public Object timeCheckAround(ProceedingJoinPoint jp) throws Throwable {
		try {
			// before 시점
			long start = System.currentTimeMillis(); // 1970.01.01 00:00:00.000 ~ 실행시간까지를 밀리초
			long start2 = System.nanoTime(); // ~ 실행시간까지를 나노초
			
			// 핵심메소드를 호출
			Object ret = jp.proceed();
			
			// after-returning 시점
			long end = System.currentTimeMillis();
			long end2 = System.nanoTime();
			logger.info("걸린 시간 : " + (end - start) + "밀리초, " + (end2 - start2) + "나노초");
			
			return ret;
		} catch (Throwable e) {
			// after-throwing 시점
			
		} 
//		finally {
//			// after 시점
//		}
	}
}
